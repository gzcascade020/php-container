#!/bin/bash

# Script for parsing cgroup information
# 
# This script will read some limits from the cgroup system and parse
# them, printing out "VARIABLE=VALUE" on each line for every limit that is
# successfully read. Output of this script can be directly fed into
# bash's export command. Recommended usage from a bash script:
# 
#     set -o errexit
#     export_vars=$(cgroup-limits) ; export $export_vars
# 
# Variables currently supported:
#     MAX_MEMORY_LIMIT_IN_BYTES
#         Maximum possible limit MEMORY_LIMIT_IN_BYTES can have. This is
#         currently constant value of 9223372036854775807.
#     MEMORY_LIMIT_IN_BYTES
#         Maximum amount of user memory in bytes. If this value is set
#         to the same value as MAX_MEMORY_LIMIT_IN_BYTES, it means that
#         there is no limit set. The value is taken from
#         /sys/fs/cgroup/memory/memory.limit_in_bytes
#     NUMBER_OF_CORES
#         Number of detected CPU cores that can be used. This value is
#         calculated from /sys/fs/cgroup/cpuset/cpuset.cpus
#     NO_MEMORY_LIMIT
#         Set to "true" if MEMORY_LIMIT_IN_BYTES is so high that the caller
#         can act as if no memory limit was set. Undefined otherwise.

function get_memory_limit {
  cat /sys/fs/cgroup/memory/memory.limit_in_bytes
}

function get_number_of_cores {
  local core_count=0
  local line core_ids
  IFS=',' read -r -a line <<< "$(cat /sys/fs/cgroup/cpuset/cpuset.cpus)"
  for group in "${line[@]}"
  do  
    IFS='-' read -r -a core_ids <<< "$group"
    if [ "${#core_ids[@]}" -eq 2 ]; then
      core_count=$((core_ids[1] - core_ids[0] + 1))
    else
      $((core_count++))
    fi
  done
  echo $core_count
}

function main {
  local memory_limit_in_bytes=$(get_memory_limit)

  echo MAX_MEMORY_LIMIT_IN_BYTES=9223372036854775807
  echo MEMORY_LIMIT_IN_BYTES=$memory_limit_in_bytes
  echo NUMBER_OF_CORES=$(get_number_of_cores)
  [ "$memory_limit_in_bytes" -gt 92233720368547 ] && echo NO_MEMORY_LIMIT=1
}

main

# Always end successfully
exit 0
